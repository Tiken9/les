# Copyright (c) 2012-2013 Oleksandr Sviridenko
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import logging
import threading
from queue import Queue


class Error(Exception):
  pass


class ExecutorBase(threading.Thread):
  """This is base class for all executors. The executor executes requests
  generated by pipeline and monitors them in prodaction. Once the request has
  been performed the response will be sent back to the pipeline.
  """

  def __init__(self, pipeline):
    super(ExecutorBase, self).__init__()
    self._pipeline = pipeline
    self._stop_flag = threading.Event()

  def run(self):
    logging.info("Executor is running...")
    while not self._stop_flag.isSet():
      if self._pipeline.has_requests():
        request = self._pipeline.get_request()
        response = self.execute(request)
        self._pipeline.put_response(response)

  def stop(self, timeout=None):
    logging.info("Stopping executor...")
    self._stop_flag.set()
    super(ExecutorBase, self).join(timeout)

  def execute(self, request):
    raise NotImplementedError()
